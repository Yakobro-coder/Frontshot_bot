from telebot.async_telebot import AsyncTeleBot
import asyncio
from telebot import types
from celery_screenshot_tasks import screen_create
from postgres_stat import insert_db
from datetime import datetime
import validators
import whois
import socket
import logging
import os

from dotenv import load_dotenv
load_dotenv()

import re
url_pattern_regex = '(([\da-zA-Z])([_\w-]{,62})\.){,127}(([\da-zA-Z])[_\w-]{,61})?([\da-zA-Z]\.((xn\-\-[a-zA-Z\d]+)|([a-zA-Z\d]{2,})))'

logging.basicConfig(filename='bot_log', level=logging.INFO)

bot = AsyncTeleBot(os.getenv('TOKEN'))

start_text = """üëãüèª –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>FrontShot.</b>
–Ø - –ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, wikipedia.org

‚Ä¢ –° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏. <i>(–ê–π–ø–∏–ª–æ–≥–≥–µ—Ä—ã, —Ñ–∏—à–∏–Ω–≥–æ–≤—ã–µ –≤–µ–±-—Å–∞–π—Ç—ã, —Å–∫—Ä–∏–º–µ—Ä—ã –∏ —Ç.–ø)</i>

‚Ä¢ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Å–≤–æ–∏ —á–∞—Ç—ã, –∏ —è —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.

 <b>FrontShot</b> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç <b>chromedriver.</b>
–†–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ <b>http, https.</b>

<s>–ò –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</s>"""

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_start = types.KeyboardButton('/start')
markup.add(btn_start)


@bot.message_handler(commands=['start', 'help'])
async def start_message(message):
    await bot.send_message(message.chat.id, start_text, parse_mode="HTML", reply_markup=markup)


@bot.message_handler(content_types='text')
async def screenshot_url(message):
    """
    –ü–æ–ª—É—á–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —ç—Ç–æ URL –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Å–∞–π—Ç–∞ –≤ celery.
    :param message: –∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :return: None
    """
    url = re.search(url_pattern_regex, message.text.split(' ')[0]).group(0)
    if validators.domain(url):
        # write in db
        insert_db.insert_msg_info(message.from_user.id, message.id, datetime.utcfromtimestamp(message.date + 10800), url)

        url = 'http://' + url
        res = await bot.send_animation(
            chat_id=message.chat.id,
            animation=open('please-wait.mp4', 'rb'),
            caption="‚ö°Ô∏è–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
        )
        info_msg = {'date': res.date, 'chat_id': res.chat.id, 'message_id': res.message_id}

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–¥–∞—á—É celery, —á–µ—Ä–µ–∑ redis
        screen_create.delay(info_msg, url)


@bot.callback_query_handler(func=lambda call: True)
async def whois_msg(message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç WHOIS –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param message: –∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :return: None
    """
    whois_info = whois.whois(message.data)
    ip_who = socket.gethostbyname(whois_info.get('domain_name') if isinstance(whois_info.get('domain_name'), str) else
                                  whois_info.get('domain_name')[0])

    msg = f"ip: {str(ip_who)}\n" \
          f"–ò–º—è –¥–æ–º–µ–Ω–∞: {whois_info.get('domain_name')}\n" \
          f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {whois_info.get('org')}\n" \
          f"–°—Ç—Ä–∞–Ω–∞: {whois_info.get('country')}"

    await bot.answer_callback_query(callback_query_id=message.id, text=msg, show_alert=True)


asyncio.run(bot.polling(non_stop=True))
